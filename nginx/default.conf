upstream backend_least_conn {
    least_conn;  # Usaría el backend con menos conexiones activas
    server backend1:5001;
    server backend2:5002;
}

upstream backend_ip_hash {
    ip_hash;  # Mantiene al mismo cliente en el mismo backend
    server backend1:5001;
    server backend2:5002;
}

# Método actual: round robin por defecto
upstream backend_cluster {
    server backend1:5001;
    server backend2:5002;
}

# Limitación de solicitudes por IP, 5 solicitudes por segundo con un burst (ráfaga máxima) de 10
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/s;

# Redirigir HTTP a HTTPS
server {
    listen 80;
    server_name localhost;

    return 301 https://$host$request_uri;
}

# Servidor HTTPS con SSL
server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;

    # Aplicar limitación a todas las peticiones
    limit_req zone=mylimit burst=10 nodelay;

    # Frontend con caché simple
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;

        # Caching para archivos estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }

    # Backend API
    location /api/ {
        proxy_pass http://backend_least_conn;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
